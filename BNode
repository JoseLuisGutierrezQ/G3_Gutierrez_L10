import java.util.ArrayList;

public class BNode<E extends Comparable<E>> {
    
    private static int globalId = 0;
    public int idNode;
    public ArrayList<E> keys;
    public ArrayList<BNode<E>> childs;
    public int count;

    public BNode(int orden) {
        this.idNode = globalId++;
        this.keys = new ArrayList<>();
        this.childs = new ArrayList<>();
        this.count = 0;

        for (int i = 0; i < orden; i++) {
            this.keys.add(null);
            this.childs.add(null);
        }
    }

    public boolean nodeFull(int maxKeys) {
        return count == maxKeys;
    }

    public boolean nodeEmpty() {
        return count == 0;
    }

    // Retorna true si encuentra la clave, y la posiciÃ³n en pos[0]
    public boolean searchNode(E key, int[] pos) {
        pos[0] = 0;
        while (pos[0] < count && key.compareTo(keys.get(pos[0])) > 0) {
            pos[0]++;
        }

        if (pos[0] < count && key.compareTo(keys.get(pos[0])) == 0) {
            return true;
        }
        return false;
    }

    @Override
    public String toString() {
        String s = "Nodo " + idNode + ": ";
        for (int i = 0; i < count; i++) {
            s += keys.get(i) + " ";
        }
        return s;
    }
}
